/**
 * This code was generated by Builder.io
 */
"use client";
import React, { useState } from "react";

interface Language {
  code: string;
  name: string;
}

interface LanguageSelectorProps {
  languages: Language[];
}

const LanguageSelector: React.FC<LanguageSelectorProps> = ({ languages }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState(languages[0]);

  const toggleDropdown = () => setIsOpen(!isOpen);

  const selectLanguage = (language: Language) => {
    setSelectedLanguage(language);
    setIsOpen(false);
  };

  return (
    <div className="relative">
      <button
        onClick={toggleDropdown}
        className="flex items-center gap-2 text-white focus:outline-none"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span>{selectedLanguage.code.toUpperCase()}</span>
        <svg
          className={`w-4 h-4 transition-transform ${
            isOpen ? "rotate-180" : ""
          }`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M19 9l-7 7-7-7"
          ></path>
        </svg>
      </button>
      {isOpen && (
        <ul
          aria-labelledby="language-selector"
          className="absolute right-0 mt-2 py-2 w-32 bg-white rounded-md shadow-xl z-10"
        >
          {languages.map((language) => (
            <li
              key={language.code}
              className="px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
            >
              <button
                role="option"
                aria-selected={language.code === selectedLanguage.code}
                onClick={() => selectLanguage(language)}
                onKeyDown={(e) => {
                  if (e.key === "Enter" || e.key === " ") {
                    selectLanguage(language);
                  }
                }}
              >
                {language.name}
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};
export default LanguageSelector;
